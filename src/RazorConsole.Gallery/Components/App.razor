@namespace RazorConsole.Gallery.Components

@using System
@using Microsoft.AspNetCore.Components
@using RazorConsole.Components
@using Spectre.Console
@using RazorConsole.Gallery.Services

@inject INuGetUpgradeChecker UpgradeChecker
<Figlet Content="Component Gallery" />
<Align Horizontal="@HorizontalAlignment.Center">
@* app bar *@

    <Rows>
        <Markup Content="Tab / Ctrl+Tab to change focus • Enter to select • Type to input • Control+C to exit" Foreground="@Color.Grey58" />
        @if (!string.IsNullOrEmpty(_versionSummary))
        {
            <Markup Content="@_versionSummary" Foreground="@Color.Grey70" />
        }
        @if (_upgradeResult?.HasUpgrade == true)
        {
            <Markup Content="@_upgradeBanner" Foreground="@Color.Gold3_1" Decoration="@(Decoration.Bold | Decoration.Italic)" />
            @if (!string.IsNullOrEmpty(_upgradeLink))
            {
                <Markup Content="Open NuGet package page" Foreground="@Color.DeepSkyBlue1" Decoration="@Decoration.Underline" link="@_upgradeLink" />
            }
        }
        <Columns>
            <Markup Content="Repo link: RazorConsole" Foreground="@Color.DeepSkyBlue1" Decoration="Decoration.Underline" link="https://github.com/LittleLittleCloud/RazorConsole" />
            <Markup Content="README" Foreground="@Color.DeepSkyBlue1" Decoration="Decoration.Underline" link="https://github.com/LittleLittleCloud/RazorConsole/blob/main/README.md" />
            <Markup Content="Give us a star ⭐😺🔥" Foreground="@Color.LightYellow3" />
        </Columns>
    </Rows>
</Align>
<Panel Expand="true">
    <Grid Columns="2" Expand="true">
        <Padder Padding="@_navigationPadding">
            <Rows>
                @foreach (var tab in _tabs)
                {
                    <Padder Padding="@_navigationItemPadding">
                        <TextButton Content="@tab.Label"
                                    BackgroundColor="@(IsActive(tab.Key) ? Color.Grey37 : Color.Black)"
                                    FocusedColor="@Color.DeepSkyBlue1"
                                    OnClick="@(() => SelectTab(tab.Key))" />
                    </Padder>
                }
            </Rows>
        </Padder>
			<Padder Padding="@(new(0,1,0,0))">
        @switch (_activeTab)
        {
            case "align":
                <AlignGallery />
                break;
            case "border":
                <BorderGallery />
                break;
            case "columns":
                <ColumnsGallery />
                break;
            case "figlet":
                <FigletGallery/>
                break;
            case "grid":
                <GridGallery />
                break;
            case "table":
                <TableGallery />
                break;
            case "html-inline":
                <HtmlInlineTextGallery />
                break;
            case "html-list":
                <HtmlListGallery />
                break;
            case "markup":
                <MarkupGallery />
                break;
            case "newline":
                <NewlineGallery />
                break;
            case "canvas":
                <CanvasGallery/>
                break;
            case "animated canvas":
                <AnimatedCanvasGallery/>
                break;
            case "padder":
                <PadderGallery />
                break;
            case "panel":
                <PanelGallery />
                break;
            case "rows":
                <RowsGallery />
                break;
            case "select":
                <SelectGallery />
                break;
            case "spinner":
                <SpinnerGallery />
                break;
            case "textbutton":
                <TextButtonGallery />
                break;
            case "textinput":
                <TextInputGallery />
                break;
            case "syntax":
                <SyntaxHighlighterGallery />
                break;
            case "markdown":
                <MarkdownGallery />
                break;
        }
			</Padder>
    </Grid>
</Panel>


@code {
    private readonly (string Key, string Label)[] _tabs = new[]
    {
        ("align", "Align"),
        ("border", "Border"),
        ("columns", "Columns"),
        ("figlet", "Figlet"),
        ("grid", "Grid"),
        ("table", "Table"),
    ("html-inline", "HTML Inline"),
    ("html-list", "HTML List"),
        ("markup", "Markup"),
    ("markdown", "Markdown"),
    ("syntax", "Syntax Highlight"),
        ("newline", "Newline"),
        ("canvas", "Canvas"),
        ("animated canvas", "Animated Canvas"),
        ("padder", "Padder"),
        ("panel", "Panel"),
        ("rows", "Rows"),
        ("select", "Select"),
        ("spinner", "Spinner"),
        ("textbutton", "Text Button"),
        ("textinput", "Text Input"),
    };

    private string _activeTab = "align";

    private readonly Padding _navigationPadding = new Padding(1, 1, 1, 1);
    private readonly Padding _navigationItemPadding = new Padding(0, 0, 0, 1);
    private UpgradeCheckResult? _upgradeResult;
    private string? _upgradeBanner;
    private string? _upgradeLink;
    private string? _versionSummary;

    private void SelectTab(string key)
    {
        if (!IsActive(key))
        {
            _activeTab = key;
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _upgradeResult = await UpgradeChecker.CheckForUpgradeAsync().ConfigureAwait(false);

        if (_upgradeResult is null)
        {
            _versionSummary = "Version information is currently unavailable.";
            return;
        }

        var currentVersion = string.IsNullOrWhiteSpace(_upgradeResult.CurrentVersion) ? "unknown" : _upgradeResult.CurrentVersion;
        var latestVersion = string.IsNullOrWhiteSpace(_upgradeResult.LatestVersion) ? "unknown" : _upgradeResult.LatestVersion;

        _versionSummary = $"Current version: {currentVersion} • Latest available: {latestVersion}";

        if (_upgradeResult.HasUpgrade)
        {
            _upgradeBanner = $"New gallery version available: {latestVersion} (current {currentVersion}).";
            _upgradeLink = _upgradeResult.PackageUri?.ToString();
            return;
        }
    }

    private bool IsActive(string key) => string.Equals(_activeTab, key, StringComparison.Ordinal);
}
